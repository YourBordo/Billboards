@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Billboards.Models
@model Billboards.Models.Advertisement
@{
    ViewData["Title"] = "Advertising";
    Layout = "~/Views/Administrator/_Layout.cshtml";
}
<!DOCTYPE html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Advertising</title>
    <link rel="shortcut icon" href="https://img.icons8.com/carbon-copy/100/000000/cat-footprint.png" type="image/png">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <script>
        function setCurTime(time) {
            vid.currentTime = time;
        }
    </script>
</head>
<body>

    <div class="m-3">
        <h2 class="m-3">Device advertising: </h2>
        @*onload="setCurTime(1)"*@
        <div class="m-5 d-flex justify-content-center">
            <video id="myVideo" width="1200" autoplay onclick="Reload()">
                <source src="~/Videos/@Model.FileName" type="video/mp4" />
            </video>
        </div>
    </div>

</body>

<script type='text/javascript'>
    var vid = document.getElementById("myVideo1");
    var canReload = false;
    function Reload() {
        if (canReload == true) {
            location.href = '@Url.Action("VideoEnding","Administrator",new {deviceId = @Model.Device.Id})';
        }

    }
    function LetToReload() {
        canReload = true;
    }
    setTimeout(LetToReload, 2);
</script>
